[
  {
    "objectID": "hw4.html",
    "href": "hw4.html",
    "title": "Homework 4",
    "section": "",
    "text": "1. What is the purpose of the lapply() function? What is the equivalent purrr function??\n&gt;  The lapply() function in R is used to apply a function to each element of a list (or vector) and return a list of the same length. The equivalent function in the purrr package is map(). The map() function applies a function to each element of a list (or vector) and returns a list.\n\n2. Suppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want use lapply() to run the code cor(numeric_matrix, method = \"kendall\") on each element of the list. Write code to do this below! (I’m really trying to ask you how you specify method = \"kendall\" when calling lapply())?\n&gt; lapply(X = my_list, FUN = cor, method = \"kendall\") \n\n3. What are two advantages of using purrr functions instead of the BaseR apply family?\n&gt; The advantage of purrr is much greater consistency between the functions. Purrr also fills in some handy map variants that are absent from base R.\n\n4. What is a side-effect function?\n&gt; Side-effect function is a function that doesn't change the data it just try to produce something, like for example: print(), plot(), write_csv(). \n\n5. Why can you name a variable sd in a function and not cause any issues with the sd function?\n&gt; When you call a function, it creates temporary function environments. This is why variables in functions don't exist outside the function (in a global envionment)"
  },
  {
    "objectID": "hw4.html#task-1-conceptual-questions",
    "href": "hw4.html#task-1-conceptual-questions",
    "title": "Homework 4",
    "section": "",
    "text": "1. What is the purpose of the lapply() function? What is the equivalent purrr function??\n&gt;  The lapply() function in R is used to apply a function to each element of a list (or vector) and return a list of the same length. The equivalent function in the purrr package is map(). The map() function applies a function to each element of a list (or vector) and returns a list.\n\n2. Suppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want use lapply() to run the code cor(numeric_matrix, method = \"kendall\") on each element of the list. Write code to do this below! (I’m really trying to ask you how you specify method = \"kendall\" when calling lapply())?\n&gt; lapply(X = my_list, FUN = cor, method = \"kendall\") \n\n3. What are two advantages of using purrr functions instead of the BaseR apply family?\n&gt; The advantage of purrr is much greater consistency between the functions. Purrr also fills in some handy map variants that are absent from base R.\n\n4. What is a side-effect function?\n&gt; Side-effect function is a function that doesn't change the data it just try to produce something, like for example: print(), plot(), write_csv(). \n\n5. Why can you name a variable sd in a function and not cause any issues with the sd function?\n&gt; When you call a function, it creates temporary function environments. This is why variables in functions don't exist outside the function (in a global envionment)"
  },
  {
    "objectID": "hw4.html#task-2---writing-r-functions",
    "href": "hw4.html#task-2---writing-r-functions",
    "title": "Homework 4",
    "section": "Task 2 - Writing R Functions",
    "text": "Task 2 - Writing R Functions\n\nRoot Mean Square Error (RMSE)\nCreate some response values and predictions:\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\nresp\n\n  [1]  7.674144  5.733128  8.637031 12.068788  4.357179  6.040709  4.843093\n  [8]  6.255948  8.512399  7.587703  8.278962  8.221201  3.304767  9.299369\n [15]  7.646876  8.504220  4.254724  5.160568  7.550652 10.115022 12.028134\n [22]  7.723097  9.702653  6.337183  5.568563 11.239175  9.903050  4.965503\n [29]  9.656077  8.081564  8.948798  3.708220  5.410925 12.714925  7.666618\n [36] 10.636295 11.886290 14.767056  8.670500  7.931076  5.338484  5.097557\n [43]  3.213884 11.444994  6.093762  3.192188  1.563749  8.753929  4.177170\n [50] 12.242498  5.781476 12.783701  4.418721  8.442989  4.282396  9.395394\n [57]  8.255719  6.016290  8.026494  9.180810  2.038727  5.273544  7.225220\n [64]  6.654107 12.260485 10.688362  9.773488  8.216967  5.093565  6.142304\n [71]  3.274337  8.547150  9.381826  7.061813  4.016495  7.543794  6.976389\n [78] 11.550401  5.209433  3.872522 13.043037  8.277356  3.231859  8.553664\n [85]  4.576422  2.213665 11.475262  6.469006  5.333390  5.656304  6.209727\n [92]  8.908905  6.956097  9.642321  7.188749 12.413663  6.020730  8.507994\n [99] 11.776177  3.387353\n\npred &lt;- predict(lm(resp ~ x), data.frame(x))\npred\n\n        1         2         3         4         5         6         7         8 \n 8.148104  6.053163  7.307135 10.085585  3.739836  5.204247  5.716673  5.693445 \n        9        10        11        12        13        14        15        16 \n 9.279037  7.335984  9.652981  8.777073  4.035984  9.071286  6.588422  7.326985 \n       17        18        19        20        21        22        23        24 \n 3.392964  5.608614  7.013660 11.578506 11.876889  9.274059 10.941555  6.562523 \n       25        26        27        28        29        30        31        32 \n 7.087342 10.226961 11.600984  5.351967 10.896273  6.565957  8.441599  3.822838 \n       33        34        35        36        37        38        39        40 \n 4.623563 12.243368  7.262566 10.655945 11.437790 12.815573 10.005657  8.075302 \n       41        42        43        44        45        46        47        48 \n 5.726624  5.240438  3.001871 10.459905  5.459384  4.533592  3.029100  7.924969 \n       49        50        51        52        53        54        55        56 \n 3.925253 11.217497  6.549574 12.625387  5.417487  7.789709  4.850664  8.938692 \n       57        58        59        60        61        62        63        64 \n 7.647044  7.730136  7.024534  8.125218  3.184053  4.045989  7.745808  6.994831 \n       65        66        67        68        69        70        71        72 \n11.552256 10.795551  8.835719  7.522155  3.725912  5.138510  3.639992  8.429384 \n       73        74        75        76        77        78        79        80 \n 9.545482  8.338708  3.261221  8.548719  6.741992 12.884971  5.537261  5.021745 \n       81        82        83        84        85        86        87        88 \n11.842039  7.698384  5.177431  9.359619  4.976822  3.056559 11.180401  5.714464 \n       89        90        91        92        93        94        95        96 \n 4.590225  4.627202  7.950078 10.276667  9.029635  8.249127  6.834518 11.564354 \n       97        98        99       100 \n 5.450278  8.493829 10.615164  3.164468 \n\n\nWrite a function:\n\ngetRMSE &lt;- function(response, prediction, ...) {\n  if (length(response) != length(prediction)) {\n    stop(\"The length of the response and prediction vectors is not the same.\")\n  }\n  mse &lt;- mean((response - prediction)^2, ...)\n  rmse &lt;- sqrt(mse)\n  \n  return(rmse)\n}\n\nTest my function:\n\n# Calculate RMSE\nrmse_value &lt;- getRMSE(resp, pred)\nprint(rmse_value)\n\n[1] 0.9581677\n\n\nAdd NA values:\n\nresp[c(3, 10)] &lt;- NA_real_\nresp\n\n  [1]  7.674144  5.733128        NA 12.068788  4.357179  6.040709  4.843093\n  [8]  6.255948  8.512399        NA  8.278962  8.221201  3.304767  9.299369\n [15]  7.646876  8.504220  4.254724  5.160568  7.550652 10.115022 12.028134\n [22]  7.723097  9.702653  6.337183  5.568563 11.239175  9.903050  4.965503\n [29]  9.656077  8.081564  8.948798  3.708220  5.410925 12.714925  7.666618\n [36] 10.636295 11.886290 14.767056  8.670500  7.931076  5.338484  5.097557\n [43]  3.213884 11.444994  6.093762  3.192188  1.563749  8.753929  4.177170\n [50] 12.242498  5.781476 12.783701  4.418721  8.442989  4.282396  9.395394\n [57]  8.255719  6.016290  8.026494  9.180810  2.038727  5.273544  7.225220\n [64]  6.654107 12.260485 10.688362  9.773488  8.216967  5.093565  6.142304\n [71]  3.274337  8.547150  9.381826  7.061813  4.016495  7.543794  6.976389\n [78] 11.550401  5.209433  3.872522 13.043037  8.277356  3.231859  8.553664\n [85]  4.576422  2.213665 11.475262  6.469006  5.333390  5.656304  6.209727\n [92]  8.908905  6.956097  9.642321  7.188749 12.413663  6.020730  8.507994\n [99] 11.776177  3.387353\n\n\nTest function with NAs:\n\n# Attempt to calculate RMSE without specifying NA removal\nrmse_with_na &lt;- getRMSE(resp, pred)\nprint(rmse_with_na)\n\n[1] NA\n\n# Calculate RMSE with NA removal\nrmse_with_na_rm &lt;- getRMSE(resp, pred, na.rm = TRUE)\nprint(rmse_with_na_rm)\n\n[1] 0.9581899\n\n\n\n\nMean Absolute Deviation (MAD)\nCreate some response values and predictions\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nWrite a function:\n\ngetMAD &lt;- function(response, prediction, ...) {\n  if (length(response) != length(prediction)) {\n    stop(\"The length of the response and prediction vectors is not the same.\")\n  }\n  mad &lt;- mean(abs(response - prediction), ...)\n  return(mad)\n}\n\nTest my function:\n\n# Calculate MAD without NA values\nmad_value &lt;- getMAD(resp, pred)\nprint(mad_value)\n\n[1] 0.8155776\n\n\nAdd NA values:\n\nresp[c(3, 10)] &lt;- NA_real_\nresp\n\n  [1]  7.674144  5.733128        NA 12.068788  4.357179  6.040709  4.843093\n  [8]  6.255948  8.512399        NA  8.278962  8.221201  3.304767  9.299369\n [15]  7.646876  8.504220  4.254724  5.160568  7.550652 10.115022 12.028134\n [22]  7.723097  9.702653  6.337183  5.568563 11.239175  9.903050  4.965503\n [29]  9.656077  8.081564  8.948798  3.708220  5.410925 12.714925  7.666618\n [36] 10.636295 11.886290 14.767056  8.670500  7.931076  5.338484  5.097557\n [43]  3.213884 11.444994  6.093762  3.192188  1.563749  8.753929  4.177170\n [50] 12.242498  5.781476 12.783701  4.418721  8.442989  4.282396  9.395394\n [57]  8.255719  6.016290  8.026494  9.180810  2.038727  5.273544  7.225220\n [64]  6.654107 12.260485 10.688362  9.773488  8.216967  5.093565  6.142304\n [71]  3.274337  8.547150  9.381826  7.061813  4.016495  7.543794  6.976389\n [78] 11.550401  5.209433  3.872522 13.043037  8.277356  3.231859  8.553664\n [85]  4.576422  2.213665 11.475262  6.469006  5.333390  5.656304  6.209727\n [92]  8.908905  6.956097  9.642321  7.188749 12.413663  6.020730  8.507994\n [99] 11.776177  3.387353\n\n\nTest function with NAs:\n\n# Calculate MAD without specifying NA removal\nmad_with_na &lt;- getMAD(resp, pred)\nprint(mad_with_na)\n\n[1] NA\n\n# Calculate MAD with NA removal\nmad_with_na_rm &lt;- getMAD(resp, pred, na.rm = TRUE)\nprint(mad_with_na_rm)\n\n[1] 0.8160831\n\n\n\n\nMy wrapper\nCreate my wrapper:\n\n# Wrapper function\nmywrapper &lt;- function(response, prediction, metrics = c(\"RMSE\", \"MAD\"), ...) {\n  # Check that both inputs are numeric, atomic vectors\n  if (!(is.vector(response) && is.atomic(response) && is.numeric(response))) {\n    stop(\"Response must be a numeric, atomic vector.\")\n  }\n  if (!(is.vector(prediction) && is.atomic(prediction) && is.numeric(prediction))) {\n    stop(\"Prediction must be a numeric, atomic vector.\")\n  }\n  \n  results &lt;- list()\n  \n  # Calculate requested metrics\n  if (\"RMSE\" %in% metrics) {\n    results$RMSE &lt;- getRMSE(response, prediction, ...)\n  }\n  \n  if (\"MAD\" %in% metrics) {\n    results$MAD &lt;- getMAD(response, prediction, ...)\n  }\n  \n  return(results)\n}\n\nTest new function using data generated below. Call it once asking for each metric individually and once specifying both metrics.\n\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\n\nmywrapper(resp, pred, metrics = c(\"RMSE\"))\n\n$RMSE\n[1] 0.9585338\n\nmywrapper(resp, pred, metrics = c(\"MAD\"))\n\n$MAD\n[1] 0.763681\n\nmywrapper(resp, pred, metrics = c(\"RMSE\", \"MAD\"))\n\n$RMSE\n[1] 0.9585338\n\n$MAD\n[1] 0.763681\n\n\nRepeat with replacing two of the response values with missing values (NA_real_).\n\nresp[c(3, 10)] &lt;- NA_real_\nresp\n\n  [1]  7.694115  3.410803        NA  9.755554 10.678945 10.581248  5.988570\n  [8]  5.543005  4.736925        NA  3.243310  7.897805  9.855315  5.166940\n [15] 12.101837  3.008712  4.859166  4.556400  3.124488  7.833066 10.102530\n [22]  8.548447  6.346055 12.670412  9.931720  6.321500  5.518813  8.439520\n [29]  6.864247 13.971987  5.212193  7.539753 11.063414  5.058663  4.087358\n [36] 11.306711  7.888329  8.213611  2.628170 10.892290  5.881970 11.406110\n [43]  7.254090  4.584461  9.081357  4.251124 11.651461 11.097630  5.481042\n [50] 12.129406 13.070201 13.701043  7.442099  8.604955  6.106971  8.838297\n [57] 10.621881  9.971891  8.989748  9.267897 10.057964  6.379390  8.070622\n [64]  5.792395  4.849019 10.172295  7.332846  4.177959 10.352438 12.235958\n [71] 12.543122  6.325098  6.319592  4.063266 11.537300  9.280695  9.835961\n [78]  5.681046  8.847813  6.039856  8.777474  7.044811 10.262565 12.418741\n [85]  5.520267  5.951304  4.081106  7.978890  3.976380  6.510106  6.962682\n [92] 10.320116  2.612249 10.209981  4.269122 11.388013  5.507902  8.134606\n [99]  4.103188 13.362974\n\n# Calculate both RMSE and MAD with NA removal\nboth_rmse_mad_na_rm &lt;- mywrapper(resp, pred, na.rm = TRUE)\nprint(both_rmse_mad_na_rm)\n\n$RMSE\n[1] 0.951734\n\n$MAD\n[1] 0.7538632\n\nboth_rmse_mad&lt;- mywrapper(resp, pred)\nprint(both_rmse_mad)\n\n$RMSE\n[1] NA\n\n$MAD\n[1] NA\n\n# Calculate only RMSE\nonly_rmse_na_rm &lt;- mywrapper(resp, pred, metrics = \"RMSE\", na.rm = TRUE)\nprint(only_rmse_na_rm)\n\n$RMSE\n[1] 0.951734\n\nonly_rmse&lt;- mywrapper(resp, pred, metrics = \"RMSE\")\nprint(only_rmse)\n\n$RMSE\n[1] NA\n\n# Calculate only MAD\nonly_mad_na_rm &lt;- mywrapper(resp, pred, metrics = \"MAD\", na.rm = TRUE)\nprint(only_mad_na_rm)\n\n$MAD\n[1] 0.7538632\n\nonly_mad &lt;- mywrapper(resp, pred, metrics = \"MAD\")\nprint(only_mad)\n\n$MAD\n[1] NA\n\n\nFinally, test your function by passing it incorrect data (i.e. a data frame or something else instead of vectors)\n\nset.seed(10)\n\n# Testing with incorrect data types\n# 1. Passing a data frame instead of vectors\nincorrect_data &lt;- data.frame(a = rnorm(10), b = rnorm(10))\ntryCatch({\n  mywrapper(incorrect_data, pred)\n}, error = function(e) {\n  print(e)\n})\n\n&lt;simpleError in mywrapper(incorrect_data, pred): Response must be a numeric, atomic vector.&gt;\n\n# 2. Passing a list instead of vectors\nincorrect_list &lt;- list(a = rnorm(10), b = rnorm(10))\ntryCatch({\n  mywrapper(incorrect_list, pred)\n}, error = function(e) {\n  print(e)\n})\n\n&lt;simpleError in mywrapper(incorrect_list, pred): Response must be a numeric, atomic vector.&gt;\n\n# 3. Passing a character vector instead of numeric vectors\nincorrect_char &lt;- as.character(rnorm(10))\ntryCatch({\n  mywrapper(incorrect_char, pred)\n}, error = function(e) {\n  print(e)\n})\n\n&lt;simpleError in mywrapper(incorrect_char, pred): Response must be a numeric, atomic vector.&gt;\n\n# 4. Passing a matrix instead of vectors\nincorrect_matrix &lt;- matrix(rnorm(20), nrow = 10)\ntryCatch({\n  mywrapper(incorrect_matrix, pred)\n}, error = function(e) {\n  print(e)\n})\n\n&lt;simpleError in mywrapper(incorrect_matrix, pred): Response must be a numeric, atomic vector.&gt;"
  },
  {
    "objectID": "hw4.html#task-3---querying-an-api-and-a-tidy-style-function",
    "href": "hw4.html#task-3---querying-an-api-and-a-tidy-style-function",
    "title": "Homework 4",
    "section": "Task 3 - Querying an API and a Tidy-Style Function",
    "text": "Task 3 - Querying an API and a Tidy-Style Function\n\n#documentation: https://newsapi.org/docs/endpoints/everything\n\n#install and load needed packages\n#install.packages(\"httr\")\nlibrary(httr)\n#install.packages(\"jsonlite\")\nlibrary(jsonlite)\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter()  masks stats::filter()\n✖ purrr::flatten() masks jsonlite::flatten()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n#load API key\napi_key &lt;- source(\"api_key.R\")[[1]]\n\nURL_ids &lt;- \"https://newsapi.org/v2/everything\"\nquery_keyword &lt;- \"technology\" \n\nresponse_search &lt;- httr::GET(URL_ids, query = list(q = query_keyword, apiKey = api_key))\n#str(response_search)\n#response_search\n\n# Check the status of the response\nif (status_code(response_search) == 200) {\n  data &lt;- content(response_search, \"text\")\n  json_data &lt;- jsonlite::fromJSON(data)\n  #print(json_data)\n  tech_info &lt;- as_tibble(json_data$articles[, -1]) #since source has id and name I want to get rid of them\n  print(tech_info)\n} else {\n  print(paste(\"Error:\", status_code(response_search)))\n}\n\n# A tibble: 100 × 7\n   author        title          description url   urlToImage publishedAt content\n   &lt;chr&gt;         &lt;chr&gt;          &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 Steven Levy   Don’t Let Mis… \"It’s OK t… http… https://m… 2024-06-07… \"It se…\n 2 Will Knight   OpenAI Offers… \"Days afte… http… https://m… 2024-06-06… \"ChatG…\n 3 Jason Parham  The Rebirth o… \"Looking f… http… https://m… 2024-05-27… \"One n…\n 4 David Gilbert Neo-Nazis Are… \"Extremist… http… https://m… 2024-06-20… \"Extre…\n 5 Lawrence Bonk Nokia just ma… \"Nokia jus… http… &lt;NA&gt;       2024-06-10… \"If yo…\n 6 Emma Roth     Elon Musk dro… \"Elon Musk… http… https://c… 2024-06-11… \"Elon …\n 7 Graeme Hanna  ‘Robot pill’ … \"A cutting… http… https://r… 2024-06-25… \"A cut…\n 8 Matt Novak    AI Turns Clas… \"Have you … http… https://i… 2024-06-17… \"Have …\n 9 Kyle Barr     Windows Is Ge… \"Microsoft… http… https://i… 2024-06-07… \"Micro…\n10 Maxwell Zeff  May 'AI' Take… \"McDonald’… http… https://i… 2024-06-17… \"McDon…\n# ℹ 90 more rows\n\n\nGenerate my own function:\n\n# Load required libraries\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(tibble)\n\n# Define the function\nquery_news_api &lt;- function(query_keyword, from_date, api_key) {\n  URL_ids &lt;- \"https://newsapi.org/v2/everything\"\n  \n  # Make the GET request with the API key and query parameters\n  response_search &lt;- httr::GET(\n    URL_ids, \n    query = list(q = query_keyword, \n                 from = from_date, \n                 to=\"2024-06-26\",  #assuming until today's date not Sys.Date()\n                 apiKey = api_key)\n    )\n  \n  # Check the status of the response\n  if (status_code(response_search) == 200) {\n    data &lt;- content(response_search, \"text\")\n    json_data &lt;- jsonlite::fromJSON(data)\n    \n    # Print total results\n    print(paste(\"Total results:\", json_data$totalResults))\n    \n    # Convert the articles data to a tibble and remove the first column (source information)\n    tech_info &lt;- as_tibble(json_data$articles[, -1]) \n    return(tech_info)\n    \n  } else {\n    stop(paste(\"Error:\", status_code(response_search)))\n  }\n}\n\n#needed variables\napi_key &lt;- source(\"api_key.R\")[[1]]\nquery_keyword &lt;- \"technology\"\n\n# Get the news articles\nfrom_date1 &lt;- \"2024-06-15\"\ntech_info1 &lt;- query_news_api(query_keyword, from_date1, api_key)\n\n[1] \"Total results: 21412\"\n\nprint(tech_info1) #Seems like by default, the API returns a maximum of 100 articles per request only.\n\n# A tibble: 100 × 7\n   author              title    description url   urlToImage publishedAt content\n   &lt;chr&gt;               &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 David Gilbert       Neo-Naz… \"Extremist… http… https://m… 2024-06-20… \"Extre…\n 2 Graeme Hanna        ‘Robot … \"A cutting… http… https://r… 2024-06-25… \"A cut…\n 3 Matt Novak          AI Turn… \"Have you … http… https://i… 2024-06-17… \"Have …\n 4 Maxwell Zeff        May 'AI… \"McDonald’… http… https://i… 2024-06-17… \"McDon…\n 5 Peter Guest         Europe … \"With chat… http… https://m… 2024-06-20… \"That …\n 6 Matt Burgess        Amazon-… \"CCTV came… http… https://m… 2024-06-17… \"Netwo…\n 7 Jake Epstein        Ground … \"Ukraine i… http… https://i… 2024-06-24… \"A VOL…\n 8 &lt;NA&gt;                Amish T… \"Comments\"  http… &lt;NA&gt;       2024-06-24… \"Many …\n 9 Jeff Lunden         When yo… \"They sit … http… https://n… 2024-06-16… \"Ninet…\n10 Grace Eliza Goodwin The Pop… \"Pope Fran… http… https://i… 2024-06-15… \"Pope …\n# ℹ 90 more rows\n\n# Get the news articles\nfrom_date2 &lt;- \"2024-06-23\"\ntech_info2 &lt;- query_news_api(query_keyword, from_date2, api_key)\n\n[1] \"Total results: 4274\"\n\nprint(tech_info2) #Seems like by default, the API returns a maximum of 100 articles per request only.\n\n# A tibble: 100 × 7\n   author           title       description url   urlToImage publishedAt content\n   &lt;chr&gt;            &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 Graeme Hanna     ‘Robot pil… \"A cutting… http… https://r… 2024-06-25… \"A cut…\n 2 Jake Epstein     Ground rob… \"Ukraine i… http… https://i… 2024-06-24… \"A VOL…\n 3 &lt;NA&gt;             Amish Tech… \"Comments\"  http… &lt;NA&gt;       2024-06-24… \"Many …\n 4 Mia Sato         Major reco… \"Music ind… http… https://c… 2024-06-24… \"Major…\n 5 Dave Rowntree    Build Your… \"[Luizão] … http… https://h… 2024-06-24… \"[Luiz…\n 6 Matt Burgess     Red Tape I… \"With cybe… http… https://m… 2024-06-24… \"I can…\n 7 Graeme Hanna     MGM-owned … \"LeoVegas … http… https://r… 2024-06-25… \"LeoVe…\n 8 Giordano Beretta PostScript… \"Musings —… http… &lt;NA&gt;       2024-06-23… \"Back …\n 9 Ben Glickman     Carmakers … \"Industry … http… https://i… 2024-06-24… \"A tra…\n10 Benjamin Mayo    EU says Ap… \"The Europ… http… https://i… 2024-06-24… \"The E…\n# ℹ 90 more rows"
  }
]